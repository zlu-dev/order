spring:
#  datasource:
#    url: jdbc:mysql://localhost:3306/vsp?characterEncoding=utf-8&allowPublicKeyRetrieval=true&useSSL=false
#    username: root
#    password: password
  kafka:
    producer:
      bootstrap-servers: 123.206.94.1:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: all
    consumer:
      bootstrap-servers: 123.206.94.1:9092
      group-id: order_consumer
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
sharding:
  jdbc:
    datasource:
      names: order0,order1
      order0:
        type: org.apache.commons.dbcp2.BasicDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://123.206.94.1:3306/order0
        username: root
        password: password
      order1:
        type: org.apache.commons.dbcp2.BasicDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://123.206.94.1:3306/order1
        username: root
        password: password
    config:
      sharding:
        default-database-strategy:
          inline:
            sharding-column: user_id
            algorithm-expression: order$->{user_id % 2}
        tables:
          t_order:
            actual-data-nodes: order$->{0..1}.t_order_$->{0..1}
            table-strategy:
              inline:
                sharding-column: order_id
                algorithm-expression: t_order_$->{order_id % 2}
            key-generator-column-name: order_id

